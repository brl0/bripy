[build-system]
requires = ["hatchling",
"hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "bripy"
dynamic = ["version"]
description = "Add a short description here!"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Brian Larsen", email = "B_R_L@hotmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
]
dependencies = [
    "attrs",
    "bash",
    "boltons",
    "click",
    "dask",
    "dnspython",
    "fsspec",
    "importlib-metadata; python_version<\"3.8\"",
    "ipympl",
    "konch",
    "libtmux",
    "loguru",
    "multiping",
    "numpy",
    "pandas",
    "pdvega",
    "primesieve",
    "psutil",
    "PyPDF4",
    "pyscaffold",
    "python-slugify",
    "requests",
    "spacy",
    "tldextract",
    "tqdm",
    "universal_pathlib",
    "validators",
    "w3lib",
    "watermark",
    "werkzeug",
    "bandit",
    "black",
    "codecov",
    "coverage",
    "datashader",
    "dominate",
    "flake8",
    "fpdf",
    "holoviews",
    "hypothesis-auto",
    "ipympl",
    "isort",
    "mypy",
    "pdvega",
    "prospector",
    "pycodestyle",
    "pydocstyle",
    "pylama",
    "pytest",
    "pytest-cov",
    "python-slugify",
    "scripttest",
    "setuptools",
    "Sphinx",
    "watermark",
    "yapf",
]

[project.optional-dependencies]
all = [
    "bandit",
    "black",
    "codecov",
    "coverage",
    "datashader",
    "dominate",
    "flake8",
    "fpdf",
    "holoviews",
    "hypothesis-auto",
    "ipympl",
    "isort",
    "mypy",
    "pdvega",
    "prospector",
    "pycodestyle",
    "pydocstyle",
    "pylama",
    "pytest",
    "pytest-cov",
    "python-slugify",
    "scripttest",
    "setuptools",
    "Sphinx",
    "watermark",
    "yapf",
]
dev = [
    "black",
    "codecov",
    "Sphinx",
    "yapf",
]
jupyter = [
    "datashader",
    "holoviews",
    "hvplot",
    "ipympl",
    "pdvega",
    "python-slugify",
    "seaborn",
    "watermark",
]
linters = [
    "bandit",
    "black",
    "flake8",
    "isort",
    "mypy",
    "prospector",
    "pycodestyle",
    "pydocstyle",
    "pylama",
]
testing = [
    "coverage",
    "dominate",
    "fpdf",
    "hypothesis-auto",
    "pytest",
    "pytest-cov",
    "scripttest",
    "setuptools",
]

[project.scripts]
bllb_parsers = "bripy.bllb.bllb_parsers:main"
ubrl = "bripy.ubrl.cli:main"

[project.urls]
Documentation = "https://github.com/brl0/bripy/"
Homepage = "https://github.com/brl0/bripy/"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/bripy/_version.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
]

[tool.black]
line-length               = 88
skip-string-normalization = false
target_version            = ['py310', 'py311', 'py38', 'py39']

[tool.isort]
color_output                   = true
ensure_newline_before_comments = true
force_single_line              = false
include_trailing_comma         = true
known_local_folder             = ["src/bripy"]
known_third_party              = []
line_length                    = 88
lines_after_imports            = 2
lines_before_imports           = 1
only_modified                  = true
profile                        = "black"
skip_gitignore                 = true
star_first                     = true
use_parentheses                = true
verbose                        = false

[tool.pytest.ini_options]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.

addopts = [
  "--code-highlight=yes",
  "--color=yes",
  "--continue-on-collection-errors",
  "-ra",

  # ## coverage
  # "-p",
  # "pytest_cov",
  # "--cov=src",
  # "--cov-report=term-missing",
  # "--no-cov-on-fail",
  # "--cov-report=html",

  # ## debug and verbosity options
  # "-q",
  # "--disable-warnings",
  # "--log-level=WARNING",
  # "--no-header",
  "--log-level=DEBUG",
  "-v",
  "-v",
  "-v",

  ## test selection
  # "--exitfirst",
  # "--last-failed-no-failures=all",
  # "--last-failed",
  "--new-first",
  # "--runxfail",

  ## output options
  # "--capture=tee-sys",  # fd|sys|no|tee-sys
  # "--show-capture=stdout", # {no,stdout,stderr,log,all}

  # ## pytest-print
  "--print-relative-time",
  "--showlocals",
  "-p",
  "pytest_print",
  # "--print",

  # ## other options
  # "--assert=plain",  # rewrite (default), plain
  # "-n=auto",  # xdist parallel testing
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
norecursedirs = [
  "*.egg-info",
  ".git",
  ".github",
  ".hypothesis",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pytest_cache",
  ".ropeproject",
  ".ruff_cache",
  ".tox",
  ".vscode",
  "__pycache__",
  "build",
  "dist",
  "docs",
  "notebooks",
]
pythonpath = ["."]
testpaths = ["src"]
xfail_strict = false
log_format = "%(asctime)s %(name)s [%(levelname)s] %(module)s.%(funcName)s:%(lineno)d | %(message)s"
log_date_format = "%H:%M:%S"

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "pragma: nocover",
  "raise NotImplementedError",
]
ignore_errors = true
omit = ["notebooks/*"]
show_missing = true
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]
